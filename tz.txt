Задача - разработать программу (web или десктоп) которая будет автоматически составлять расписание
игр между детскими футбольными командами в рамках турнира
Исходные данные и условия
Имеется: несколько (в текущем чемпионате 7, но может быть и больше и меньше) стадионов, произвольное
количество (около 370) команд детей разных возрастов, команда разбиваются на дивизионы (это просто
группировка) по возрасту игроков (всего в одном дивизионе порядка 30 команд). Команды играют только в рамках
одного дивизиона (игры между командами различных дивизионов не проводятся).
У каждой команды есть тренер, один тренер может иметь несколько команд (от 1 до 5) и в разных дивизионах.
Команды одного тренера могут быть как в разных так и в одном дивизионе. В случае если у одного тренера есть
несколько команд в одном дивизионе - такие команды между собой играть не могут.
Чемпоинат состоит из туров (до 10 туров). В каждом туре может присутствовать несколько игровых дней и
несколько стадионов на которые подают заявки команды. Есть общий список команд, на тур заявляются не все
команды из общего списка а только те которые подали заявки.
Команды дают пожелания в виде таблицы в которой отмечаются 1) день (команда может изъявить желание играть
только в один день в один или несколько временных диапазонов) 2) стадион (команда может сказать что готова
играть на любом стадионе или на каком-то конкретном стадионе в выбранный день) 3) временной диапазон или
временные диапазоны (пример: с 10-00 до 14-00 и с 16-00 до 20-00, у одной команды может быть несколько
временных диапазонов, пожелания по времени могут быть произвольными и не обязательно совпадать строго с
временными диапазонами ирг проводимых на определенном стадионе в определенный день, команда может
сказать что готова играть в любое время)
Стадион разбивается на произвольное количество полей (от 1 до 6) полей.
У полей и команд есть формат, те какое количество игроков выходит на матч.
Форматы команд
2 3 .. 7 - это единственный формат который играется на 2 полях более мелкого формата
Если игра формата 7 то игра происходит на двух полях, тк полей формата 7 очень мало
Форматы полей
2 .. 7
На поле определенного формате могут играть все команды аналогичного или более мелкого формата
Игровой день разбивается на несколько игровых слотов: задаются параметры 1) начало первой игры 2) длина
игры с учетом перерыва между играми 3) количество игр на данном стадионе в данный день
Результат - таблица расписаний игр тура в проводимые дни на выбранных стадионах в согласованном формате.
Шаблон расписания тут:
Условия которые необходимо учитывать при составлении расписания:
Перерыв у одного тренера - максимум 1 слот и всего за 1 день не более 50% перерывов от количества игр, те
если у тренера 5 команд те 10 игр тк каждая команда играет по 2 игры то не более 5 перерывов, если 6 команд те
12 игр у тренера то не более 6 перерывов
Перерывы у команд - макс 1 тайм слот, но можно игры ставить подряд без перерыва
Каждая команда играет ровно 2 игры, те сколько команд заявляется на 1 день, ровно столько игр и должно быть.
Существует история игр по турам, те команды которые играли между собой в предыдущих турах, команды
которые играли в предыдущих турах - в последующих турах играть не должны. Но нужно сделать исключение в
таблице предыдущих игр: должна быть галочка возможности проведения повторной игры для выбранных записей
таблицы ранее проводимых игр.
Как происходит процесс:
Организаторы один раз заполняют исходные данные о следующих сущностях для каждого тура (можно загрузить
в программу в виде таблицы а можно сделать редактируемый интерфейс в котором заполняются
соответствующие данные):
1) Самое главное - это таблица пожеланий команд на тур. Поля: команда, дивизион, формат, тренер, дата,
стадион, временные диапазоны (возможно, если есть несколько временных диапазонов то можно
создавать несколько записей в данной таблице).
2) Данные по туру - стадионы и дни. Поля: название стадиона, день игры, перечень полей, по каждому полю
- формат, время начала первой игры, продолжительность игры с учетом перерыва, количество игр
3) Предыдущие игры между командами
АЛГОРИТМ (я даю пример, но можно делать по-своему, есть еще варианты, например, через рекурсию или
иные варианты, но не надо делать прямым перебором тк это будет долго, обязательно отсекать заранее
непроходные варианты)
Алгоритм однозначно 100% проходит все возможные варианты расстановок и учитывает все условия.
Если алгоритм дает результат что нет решения, то значит были испробованы все возможные расстановки
команд по всем временным слотам и вариантов решений нет и надо оператору договариваться с
тренерами о корректировке списка пожеланий до начала процедуры расстановки всех команд в
расписание. Если алгоритм дает успешное расписание игр тура, то это первый успешный вариант
который учитывает все пожелания команд и все условия формирования расписания (возможны другие
варианты).
Алгоритм работает только с исходными данными относительно пожеланий команд.
Шаг 0 (инициализация)
Таблицы:
1) Команды
2) Тренеры - я включил тренера в таблицу команды хотя можно создать таблицу тренеров отдельно, тк по
тренерам тоже есть логика
3) Стадионы - включил в таблицу Поля
4) Поля
5) Дивизионы
6) Туры
7) Пожелания команд
8) Игры (игры команд в предыдущих турах)
9) Форматы - включил в таблицы команды и Поля
Таблица Команды:
1) ID команды
2) Название команды
3) Тренер
4) Дивизион
5) Формат
Таблица Туры
1) ID Тура
2) Название Тура
3) День
4) Стадион
Таблица Поля
1) ID Поля
2) Тур
3) Дата
4) Стадион
5) Номер поля
6) Формат
7) Время начала первой игры
8) Продолжительность игры
9) Количество игр
Таблица Игры (игры команд в предыдущих турах):
1) ID Игры
2) Команда 1
3) Команда 2
4) Тур
Таблица Пожелания команд:
1) ID пожелания
2) Команда
3) Стадион
4) Дата
5) Время с
6) Время до
7) Время с 2
8) Время до 2
Шаг 1 - формирование и проверка таблицы пожеланий
Перед формированием расписания тура команды направляют свои пожелания. Данные пожелания могут быть
заполнены либо в виде значений пог каждой команде: КОМАНДА Х - пожелания по дате: ЛЮБАЯ дата либо
указание конкретной даты, времени: ЛЮБОЕ ВРЕМЯ, либо с указанием конкретных значений времени с и по (до
двух диапазонов времени), пожелания по стадиону: ЛЮБОЙ стадион либо указание конкретного стадиона. Если
команда в таблице заявок то она играет в туре. Пожелания команд фиксируются в таблице пожеланий.
Алгоритм работает только с таблицей пожеланий как с исходными данными. Изменения в данную таблицу
пожеланий команд может вносить только оператор программы по согласованию с тренерами которые подали
заявку с пожеланиями от имени своих команд.
Собрали все пожелания - определяем игровой день и стадион. Если в таблице пожеланий более одного игрового
дня и стадиона, то составление расписания в рамках каждой совокупности {стадион, день} - происходит отдельно
Проверили и скорректировали таблицу пожеланий на то что данный тур будет проведен на одном поле и в один
день и для каждой заявленной команды есть два спаринг партнера в своем дивизионе.
Выбираем из таблицы пожеланий количество команд которые будут играть в даном туре.
Сколько команд - стольки и должно быть игр. Сравниваем с количеством игр которое может вместить стадион.
Всего X временных слотов и Y полей те X*Y (еще надо учтесть что игры команд формата 7 играются на двух
полях) возможных игр на стадионе при условии полного дня.
Если команд более X*Y то пожелания должны быть скорректированы вручную, тк в один игровой день на одном
стадионе провести 65 игр не возможно, те надо скорректировать пожелания следующим образом: 1) убрать
несколько команд либо 2) перенести несколько команд на другой стадион. Корректировку пожеланий проводит
оператор программы и договаривается с тренерами.
Сделать проверку на то что в каждом дивизионе для каждой команды в этом же дивизионе есть другие две
команды с которыми данная команда не играла в турах ранее (те может провести игры в даннгом туре). Если есть
команды которые не имеют в своем дивизионе двух других команд с котороми они не играли ранее - то
подсветить данные команды и дать возможность оператору программы скорректировать пожелания таким
образом чтобы исключить данные команды из данного тура и согласовать данное решение с тренерами данных
команд.
Шаг 2
Промежуточные таблицы
1) Таблица Возможные игры тура (таблица текущих состояний)
2) Таблица Расписание (Игровые слоты)
3) Таблица Дерево решений
Таблица Возможные игры тура (таблица текущих состояний):
Формирование таблицы происходит путем перебора всех возможных сочетаний двух команд друг с другом в
рамках каждого дивизиона из списка пожеланий.
Таблица инициализируется следующим образом:
1) Команда 1 - указывается команда 1 из таблицы пожеланий
2) Команда 2 - указывается команда 2 из таблицы пожеланий отличающаяся от команда 1, также
учитывается что данная запись (пара команд) является уникальной в данной таблице с учетом
перестановок (те пары {команда 1 и команда 2} и {команда 2 и команда 1} являются одинаковыми и не
могут одновременно присутствовать в данной таблице.
В таблице должны присутствовать все возможные пары команд которые подали заявки на тур для каждого из
дивизионов. Заполнение записей: Команда 1 - с командами: 2 - х, команда 2 - с командами 3 - х (тк запись
команда 2 - команда 1 уже была поставлена в таблицу ранее), команда 3 играет с командами 4 - х (тк записи
команда 3 - команды 1 и 2 уже были поставлены в таблицу ранее), …, команда x-1 играет с командой x (тк записи
команда х-1 - команды 1 - х-2 уже были поставлены в таблицу ранее).
3) Количество команд у тренера 1 - заполняется числом путем выборки и суммирования из таблицы
Команды (минимум = 1)
4) Количество команд у тренера 2 - заполняется числом путем выборки и суммирования из таблицы
Команды (минимум = 1)
5) Команда 1 - Время с - заполняется числом значения времени из таблицы Пожеланий
6) Команда 1 - Время до - заполняется числом значения времени из таблицы Пожеланий
7) Команда 2 - Время с - заполняется числом значения времени из таблицы Пожеланий
8) Команда 2 - Время до - заполняется числом значения времени из таблицы Пожеланий
9) Связанность - целое число, при инициализации таблицы = 0 - добавляет +1 при условии что одна из
данных команд уже выставлена на поле и значит что вторая игра данной команды должна состояться на
временных слотах в диапазоне -2, -1, +1, +2, также добавляет +1 всем играм с командами данного
тренера и значит что игра команды данного тренера должна состояться на временных слотах в диапазоне
-2, -1, +1, +2
10) Формат - если формат 7 то для данной игры требуется резервирование 2 полей
11) Сложность игры - скоринг который заполняется как сумма следующих параметров: {Количество команд у
тренера 1} + {Количество команд у тренера 2} + {если “Команда 1 - Время с” и “Команда 1 - Время до”
непустое то 1, если пустое, то 0} + {если “Команда 2 - Время с” и “Команда 2 - Время до” непустое то 1,
если пустое, то 0} + {если Формат = 7 то 1, если <=6, то 0} + {Связанность}
12) Дивизион - ID дивизиона (тк команды могут играть только в рамках одного дивизиона)
13) Аннулирование игры - при инициализации таблицы устанавливается 0 если в предыдущих турах команды
не играли, 1 если в предыдущих турах команды играли. 1 означает что игра даных двух команд не может
состояться на данной игерации, 0 означает что игра может состояться на данной итерации.
Дополнительная проверка: Может быть вариант что у выбранной записи диапазоны пожеланий по
времени не совпадают, те например команда 1 хочет играть с 9 до 12 а команда 2 хочет играть с 14 до 19 -
при таком условии Аннулирование игры - также устанавливается в 1, те игра не может состояться в
данногм туре.
Таблица Расписание (Игровые слоты):
1) ID Текущей Игры
2) Время начала игры (или номер игры на данном поле)
3) Поле
4) Команда 1
5) Команда 2
Таблица заполняется только на основном игеративном шаге алгоритма, изначально она пустая.
Таблица Дерево решений
1) ID Итерация
2) ID Родительская итерация
3) Время
4) ID Поле
5) ID Возможной игры
6) Есть ли альтернативные варианты на данном шаге дерева решений
7) Активная или тупиковая ветка - 0=тупиковая, 1=активная
8) Что сделано на данной итерации - для того чтобы можно было откатить таблицы Расписание и Возможные
игры до любой итерации, (например можно перечислять в текстовом виде через запятую таблицы и поля и
вносимые изменения вносимые на данной итерации, может быть можно в виде XML или даже команд
SQL, но главное чтобы был однозначный алгоритм восстановления таблиц Расписание и Возможные игры
до своего состояния на любой итерации до нее и после нее)
Если формат 7 то в таблице Дерево решений и в таблице Расписание фиксируются два временных слота на
полях 1 и 2), а если формат менее 7 то поле может быть любым
Основной итеративный шаг алгоритма
(МОЖНО НЕ ДЕЛАТЬ ПО МОЕМУ АЛГОРИТМУ А ДЕЛАТЬ ПРИ ПОМОЩИ РЕКУРСИИ вместо дерева решений)
Переменные
Текущее значение Итерации = {максимальное значение ID итерации таблицы Дерево решений} + 1. Инициальное
значение ID итерации = 0
Текущее значение рлодительской итераци = Текущее значение Итерации -1. Инициальное значение ID
родительской итерации = 0
Родительская итерация - предыдущая успешная итерация.
При переходе на следующую итерацию увеличиваем +1 значение текущей итерации
Если текущая ветка активна, то текущая родительская итерация принимает значение предыдущей активной
итерации алгоритма.
Сначала расставляем в расписание игры команд дивизионов с форматом 7, потом остальные.
1) Проверка на окончание алгоритмма. Результат алгоритма признается УСПЕШНЫМ - если полностью
заполненная таблица Расписание с количеством строк равным количеству заявленных команд на данный
тур, результат признается НЕУСПЕШНЫМ если алгоритм прошел по всему дереву решений и не
достигнуто состояние когда полностью заполненная таблица Расписание с количеством строк равным
количеству заявленных команд на данный тур.
Если результат - НЕУСПЕШНО то необходимо оператору программы вмешаться и скорректировать таблицу
пожеланий команд перед данным туром и договориться с тренерами, тк алгоритм работает только на основании
таблицы пожеланий и 100% перебирает всапе возможные варианты.
2) Выбираем из таблицы Возможные игры тура игру с самым большим значением Сложность игры
Может быть одна запись, а может быть несколько
Если есть несколько вариантов выбора записей таблицы Возможные игры тура с которыми работаем, то тут
возникает ВАРИАБЕЛЬНОСТЬ 1 (По выбору команд которые играют). Выбираем рандомную запись такую
которая в дереве решений не имеет тупикового значения на данной итерации. Проверяем по таблице Дерево
решений что данный выбор ранее не привел к тупиковой ветке при всех допустимых значениях времени и поля.
Если привел к тупиковой ветке то выбираем другой вариант рандомно который не привел к тупиковой ветке из
данного выбора. Если нетупиковых вариантов на данной итерации в данной развилке вариабельности нет, то
данная итерация признается тупиковой и мы спускаемся на материнскую итерацию и проигрываем алгоритм
относительно других не проигранных ранее вариабельностей. Вариабельность относительно команд признается
тупиковой в дереве решений путем указания следующих значений: id итерации = текущая итерация, id
материнской итерации = текущая материнская итерация, id возможной игры, время указывается как NULL (те
означает что любое время для данных команд на данной ветке итераций является тупиковой веткой),
Альтернативные варианты на данном шаге дерева решений = 0, Активная или тупиковая ветка = 0 , Что сделано
на данной итерации - перечисляются изменения в таблице Возможные игры и в таблице расписания
3) Проверяем: Возможно ли поставить по времени и полю
Выбираем временной слот и поле/поля:
3.1) Свободные временные слоты. Если формат = 7 то должно быть свободно один и тот же временной слот на
поле 1 и поле 2. Если формат меньше 7 то поле может быть любое. Результат - множество временных слотов.
3.2) Временные пожелания команды 1. Результат - множество временных слотов.
3.3) Временные пожелания команды 2. Результат - множество временных слотов.
3.4) Временные слоты исходя из связи с уже поставленой в расписании игрой с участием команды 1 и условия:
Перерывы у команд - макс 1 тайм слот (возможно выставление игр одной команды подряд, те без перерывов).
Что делаем: находим в таблице Расписание временной слот в которых играет команда 1. Может не быть
временых слотов если данная команда в данном туре ни разу не была поставлена в расписание. В таком случае
для данной команды допустим любой временной слот. Может быть одна игра если на предыдущих итерациях
алгоритма мы уже поставили одну игру с данной командой. В таком случае допустимые временные слоты: -2, -1,
+1, +2. Результат - множество временных слотов.
3.5) Временные слоты исходя из связи с уже поставленой в расписании игрой с участием команды 2. Логика
данного действия аналогична логике анализа команды 1 на предыдущем дейтсвии. Результат - множество
временных слотов.
3.6) Временные слоты исходя из связи с уже поставленой в расписании игрой с участием тренера 1. Что делаем:
находим в таблице Расписание временные слоты в которых играют команды которые ведет тренер 1. Может не
быть временых слотов если данный тренер в данном туре ни разу не был поставлен в расписание. В таком
случае для данного тренера допустим любой временной слот. Может быть несколько временных слотов если на
предыдущих итерациях алгоритма мы уже поставили одну или несколько игр с данным тренером. В таком случае
допустимые временные слоты: -2, -1, +1, +2 относительно всех вы банных временных слотов данного тренера за
исключением тех временных слотов в которых уже имеются игры в которых участвует данные тренер. Также
проверяем условие о количестве перерывов за 1 день у одного тренера и то что всего за 1 день не более 50%
перерывы от количества игр с его командами: Считаем количество перерывов у тренера и если у тренера больше
50% перерывы то мы сможем поставить игру с командой данного тренера только на такие слоты которые не
увеличивают количество перерывов, те убираем из обобранного множества слотов те слоты которые приводят к
увеличению количества перерывов. Результат - множество временных слотов.
3.7) Временные слоты исходя из связи с уже поставленой в расписании игрой с участием тренера 2. Логика
данного действия аналогична логике анализа другого тренера. Результат - множество временных слотов.
3.8) Пересекаем множества 1-7, получаем диапазон значений времени для выбранной возможной игры (пара двух
команд на данном шаге итераций). Можно занести в таблицу Дерево решенгий соответствующее значение для
данной возможной игры и данной итерации в поле Есть ли альтернативные варианты на данном шаге дерева
решений. Выбор поля: Если формат = 7 то игра происходит только на поле 1 и поле 2. Если формат меньше 7 то
поле может быть любое из свободных.
3.9) Из полученного на действии 3.8 диапазона значений времени удаляем значения временных слотов из
ТУПИКОВЫХ веток этих же команд на данном значении материнской итерации из Дерева решений: выбираем из
дерева решений значения временных слотов в которых {Родительская итерация = Текущая родительская
итерация} и {id игры = с текущим id игры на данной итерации} и {Активная или тупиковая ветка =ТУПИКОВАЯ}
3.10) Если на действии 9 не найдено ни одного временного слота то игра не может быть выставлена в расписание
ВЕТКА ПРИЗНАЕТСЯ ТУПИКОВОЙ для данных двух команд и данной материнской ветки и алгоритм
возвращается на предыдущую материнскую ветку и далее смотрим какие у нее остаются врианты по выбору
других команд. Если на действии 3.8 найден 1 или более временных слотов и определено поле, то это
ВАРИАБЕЛЬНОСТЬ 2 (По временному диапазону и полю). Выбираем любой вариант такой который не был
ранее выставлен в дереве решений.
3.11) Выбираем поле - проверяем для данной родительской итерации и временного слота есть ли доступные
поля. Если доступное поле на данное время есть то ОК, Если доступных полей на данной итерации на даннгоый
временной слот нет то ТУПИК.
Действия 1-10 дают два возможных результата:
1) Либо нет для выбранных двух команд временного слота в котором они могут сыграть и тогда мы
возвращаемся по дереву решений на родительскую итерацию
2) Либо есть множество временных слотов в которое мы можем поставить данную игру в расписание
и тогда мы выбираем любое рандомное время и выставляем в соответствующие таблицы
Заполняем таблицу Расписание (Игровые слоты)
Если ветка тупиковая, то в таблице Расписания пересчитываются значения и восстанавливаются значения
до начала материнской итерации по Дереву решений
Если ветка активная то в расписание ставятся соответствующие значения
Заполняем таблицу Дерево решений
Если ветка тупиковая, то ставятся соответствующие значения данной итерации и признак что ветка
тупиковая
Если ветка не тупиковая, то ставятся соответствующие значения данной итерации и признак что ветка
активная
Дерево решений записывает все дейтсвия которые прошел алгоритм на всех итерациях и по данной
таблице можно восстановить состояние всех других таблиц (Расписание и Возможные игры) на момент начала
любой из итераций. Это необходимо для того чтобы алгоритм 100% покрывал все возможные варианты
расстановок всех игр на всех временных слотах и всех полях в туре.
Заполняем таблицу Возможные игры - на каждой итерации
Если отработала тупиковая ветка и возвращаемся на материнскую итерацию то восстанавливаем
значение данной таблицы до соответствующего значения до начала данной материнской итерации по дереву
решений
Если на текущей итерации в таблице Дерево решений получили АКТИВНУЮ ВЕТКУ и движемся дальше
то обновляем таблицу Возможные игры следующим образом:
1) Для данной пары команда 1 и команда 2 ставим Аннулирование игры = 1 то есть данная игра более не
должна рассматриваться в алгоритме тк она уже выставлена в расписании и находится в активной ветке
алгоритма
2) Связанность добавляем +1 у всех записей данной таблицы в которых встречается данная команда 1 и
данная команда 2 и данный тренер 1 и данный тренер 2
3) Пересчитываем Сложность у всех возможных игр исходя из изменения значения связанности у некоторых
записей в данной таблице
4) Аннулируем те записи в которых присутствуют команды которые в расписании уже имеют две игры (тк
каждая команда играет ровно по 2 игры в каждом туре)
Закончили работу только с записями таблицы Возможные игры с форматом 7.
Работаем далее только с записями таблицы Игры с форматом меньше 7.
Закончили работу только с записями таблицы Возможные игры с форматом меньше 7.